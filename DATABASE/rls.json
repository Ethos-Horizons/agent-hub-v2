[
    {
      "schemaname": "public",
      "tablename": "agent_memories",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "agent_memories",
      "policyname": "Users can access their tenant's agent memories",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "agent_skills",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "agent_skills",
      "policyname": "Users can access their tenant's agent skills",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "agents",
      "policyname": "Admins have full access to agents",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM user_roles\n  WHERE ((user_roles.user_id = ( SELECT auth.uid() AS uid)) AND (user_roles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "agents",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "agents",
      "policyname": "Users can access their tenant's agents",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "agents",
      "policyname": "Users can delete their own agents",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "DELETE",
      "qual": "(EXISTS ( SELECT 1\n   FROM user_agents\n  WHERE ((user_agents.user_id = ( SELECT auth.uid() AS uid)) AND (user_agents.agent_id = agents.id))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "agents",
      "policyname": "Users can insert agents",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "true"
    },
    {
      "schemaname": "public",
      "tablename": "agents",
      "policyname": "Users can update their own agents",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "UPDATE",
      "qual": "(EXISTS ( SELECT 1\n   FROM user_agents\n  WHERE ((user_agents.user_id = ( SELECT auth.uid() AS uid)) AND (user_agents.agent_id = agents.id))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM user_agents\n  WHERE ((user_agents.user_id = ( SELECT auth.uid() AS uid)) AND (user_agents.agent_id = agents.id))))"
    },
    {
      "schemaname": "public",
      "tablename": "agents",
      "policyname": "Users can view their own agents",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM user_agents\n  WHERE ((user_agents.user_id = ( SELECT auth.uid() AS uid)) AND (user_agents.agent_id = agents.id))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "api_keys",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "api_keys",
      "policyname": "Users can access their tenant's API keys",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "artifacts",
      "policyname": "Users can create artifacts for their runs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(EXISTS ( SELECT 1\n   FROM ((runs r\n     JOIN projects p ON ((r.project_id = p.id)))\n     JOIN org_members om ON ((p.org_id = om.org_id)))\n  WHERE ((om.user_id = ( SELECT auth.uid() AS uid)) AND (r.id = artifacts.run_id))))"
    },
    {
      "schemaname": "public",
      "tablename": "artifacts",
      "policyname": "Users can view artifacts for their runs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM ((runs r\n     JOIN projects p ON ((r.project_id = p.id)))\n     JOIN org_members om ON ((p.org_id = om.org_id)))\n  WHERE ((om.user_id = ( SELECT auth.uid() AS uid)) AND (r.id = artifacts.run_id))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "conversation_context",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "conversation_context",
      "policyname": "Users can access their tenant's conversation contexts",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "conversations",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "conversations",
      "policyname": "Users can access their tenant's conversations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "knowledge_base",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "knowledge_base",
      "policyname": "Users can access their tenant's knowledge base",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "leads",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "leads",
      "policyname": "Users can access their tenant's leads",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "memory",
      "policyname": "Users can access their project's memory",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(project_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "memory",
      "policyname": "Users can create memory for their projects",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(EXISTS ( SELECT 1\n   FROM (projects p\n     JOIN org_members om ON ((p.org_id = om.org_id)))\n  WHERE ((om.user_id = ( SELECT auth.uid() AS uid)) AND (p.id = memory.project_id))))"
    },
    {
      "schemaname": "public",
      "tablename": "memory",
      "policyname": "Users can view memory for their projects",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM (projects p\n     JOIN org_members om ON ((p.org_id = om.org_id)))\n  WHERE ((om.user_id = ( SELECT auth.uid() AS uid)) AND (p.id = memory.project_id))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "messages",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "messages",
      "policyname": "Users can access their tenant's messages",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(tenant_id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "org_members",
      "policyname": "Admins have full access to org_members",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM user_roles\n  WHERE ((user_roles.user_id = ( SELECT auth.uid() AS uid)) AND (user_roles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "org_members",
      "policyname": "Org owners can manage members",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM org_members org_members_1\n  WHERE ((org_members_1.user_id = ( SELECT auth.uid() AS uid)) AND (org_members_1.org_id = org_members_1.org_id) AND (org_members_1.role = 'owner'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "org_members",
      "policyname": "Users can view members in their organizations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(org_id IN ( SELECT org_members_1.org_id\n   FROM org_members org_members_1\n  WHERE (org_members_1.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "org_members",
      "policyname": "Users can view members of their orgs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM org_members om\n  WHERE ((om.org_id = org_members.org_id) AND (om.user_id = ( SELECT auth.uid() AS uid)))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "org_members",
      "policyname": "Users can view their org memberships",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(user_id = ( SELECT auth.uid() AS uid))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "organizations",
      "policyname": "Users can view their organizations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(id IN ( SELECT org_members.org_id\n   FROM org_members\n  WHERE (org_members.user_id = auth_user_id())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "orgs",
      "policyname": "Admins have full access to orgs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM user_roles\n  WHERE ((user_roles.user_id = ( SELECT auth.uid() AS uid)) AND (user_roles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "orgs",
      "policyname": "Owners can delete orgs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "DELETE",
      "qual": "(EXISTS ( SELECT 1\n   FROM org_members\n  WHERE ((org_members.user_id = ( SELECT auth.uid() AS uid)) AND (org_members.org_id = orgs.id) AND (org_members.role = 'owner'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "orgs",
      "policyname": "Owners can update orgs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "UPDATE",
      "qual": "(EXISTS ( SELECT 1\n   FROM org_members\n  WHERE ((org_members.user_id = ( SELECT auth.uid() AS uid)) AND (org_members.org_id = orgs.id) AND (org_members.role = 'owner'::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM org_members\n  WHERE ((org_members.user_id = ( SELECT auth.uid() AS uid)) AND (org_members.org_id = orgs.id) AND (org_members.role = 'owner'::text))))"
    },
    {
      "schemaname": "public",
      "tablename": "orgs",
      "policyname": "Users can create orgs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "true"
    },
    {
      "schemaname": "public",
      "tablename": "orgs",
      "policyname": "Users can view their orgs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM org_members\n  WHERE ((org_members.user_id = ( SELECT auth.uid() AS uid)) AND (org_members.org_id = orgs.id))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "profiles",
      "policyname": "Users can update their own profile",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "UPDATE",
      "qual": "(id = auth_user_id())",
      "with_check": "(id = auth_user_id())"
    },
    {
      "schemaname": "public",
      "tablename": "profiles",
      "policyname": "Users can view profiles",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Org owners can manage projects",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM org_members\n  WHERE ((org_members.user_id = ( SELECT auth.uid() AS uid)) AND (org_members.org_id = projects.org_id) AND (org_members.role = 'owner'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Users can view projects in their orgs",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM org_members\n  WHERE ((org_members.user_id = ( SELECT auth.uid() AS uid)) AND (org_members.org_id = projects.org_id))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "runs",
      "policyname": "Users can create runs in their projects",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(EXISTS ( SELECT 1\n   FROM (projects p\n     JOIN org_members om ON ((p.org_id = om.org_id)))\n  WHERE ((om.user_id = ( SELECT auth.uid() AS uid)) AND (p.id = runs.project_id))))"
    },
    {
      "schemaname": "public",
      "tablename": "runs",
      "policyname": "Users can update runs in their projects",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "UPDATE",
      "qual": "(EXISTS ( SELECT 1\n   FROM (projects p\n     JOIN org_members om ON ((p.org_id = om.org_id)))\n  WHERE ((om.user_id = ( SELECT auth.uid() AS uid)) AND (p.id = runs.project_id))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM (projects p\n     JOIN org_members om ON ((p.org_id = om.org_id)))\n  WHERE ((om.user_id = ( SELECT auth.uid() AS uid)) AND (p.id = runs.project_id))))"
    },
    {
      "schemaname": "public",
      "tablename": "runs",
      "policyname": "Users can view runs in their projects",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM (projects p\n     JOIN org_members om ON ((p.org_id = om.org_id)))\n  WHERE ((om.user_id = ( SELECT auth.uid() AS uid)) AND (p.id = runs.project_id))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "system_settings",
      "policyname": "Allow all operations for authenticated users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "user_agents",
      "policyname": "Admins have full access to user_agents",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM user_roles\n  WHERE ((user_roles.user_id = ( SELECT auth.uid() AS uid)) AND (user_roles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "user_agents",
      "policyname": "Users can view their own agent associations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(user_id = ( SELECT auth.uid() AS uid))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "user_roles",
      "policyname": "Admins have full access to user_roles",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM user_roles user_roles_1\n  WHERE ((user_roles_1.user_id = ( SELECT auth.uid() AS uid)) AND (user_roles_1.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "user_roles",
      "policyname": "Users can view their own roles",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(user_id = ( SELECT auth.uid() AS uid))",
      "with_check": null
    },
    {
      "schemaname": "storage",
      "tablename": "objects",
      "policyname": "Users can delete files in their organizations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "DELETE",
      "qual": "((bucket_id = 'agent-hub'::text) AND ((storage.foldername(name))[1] IN ( SELECT org.slug\n   FROM (organizations org\n     JOIN org_members mem ON ((org.id = mem.org_id)))\n  WHERE (mem.user_id = auth_user_id()))))",
      "with_check": null
    },
    {
      "schemaname": "storage",
      "tablename": "objects",
      "policyname": "Users can select files from their organizations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "((bucket_id = 'agent-hub'::text) AND ((storage.foldername(name))[1] IN ( SELECT org.slug\n   FROM (organizations org\n     JOIN org_members mem ON ((org.id = mem.org_id)))\n  WHERE (mem.user_id = auth_user_id()))))",
      "with_check": null
    },
    {
      "schemaname": "storage",
      "tablename": "objects",
      "policyname": "Users can update files in their organizations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "UPDATE",
      "qual": "((bucket_id = 'agent-hub'::text) AND ((storage.foldername(name))[1] IN ( SELECT org.slug\n   FROM (organizations org\n     JOIN org_members mem ON ((org.id = mem.org_id)))\n  WHERE (mem.user_id = auth_user_id()))))",
      "with_check": "((bucket_id = 'agent-hub'::text) AND ((storage.foldername(name))[1] IN ( SELECT org.slug\n   FROM (organizations org\n     JOIN org_members mem ON ((org.id = mem.org_id)))\n  WHERE (mem.user_id = auth_user_id()))))"
    },
    {
      "schemaname": "storage",
      "tablename": "objects",
      "policyname": "Users can upload files to their organizations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "((bucket_id = 'agent-hub'::text) AND ((storage.foldername(name))[1] IN ( SELECT org.slug\n   FROM (organizations org\n     JOIN org_members mem ON ((org.id = mem.org_id)))\n  WHERE (mem.user_id = auth_user_id()))))"
    }
  ]